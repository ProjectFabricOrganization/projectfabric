@page "/counter"
@using System.Runtime.InteropServices

<label>
    <input type="checkbox" @bind="shouldRender"/>
    Should Render?
</label>

<p>Current count: @currentCount</p>

<p>
    <button @onclick="IncrementCount">Click me</button>
</p>

@code {
    private int currentCount;
    private bool shouldRender = true;

    protected override void OnInitialized()
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(OnInitialized)}");
        currentCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(OnInitializedAsync)}");
        currentCount++;
        await Task.Delay(10000);
        currentCount++;
        return;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(OnParametersSet)}");
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(ShouldRender)}: {shouldRender}: {currentCount}");
        return shouldRender;
    }

    // public override async Task SetParametersAsync(ParameterView parameters)
    // {
    //     Console.WriteLine($"{DateTime.Now}. {nameof(SetParametersAsync)}");
    //     await Task.Delay(1000);
    //     return;
    // }

    // protected override async Task OnParametersSetAsync()
    // {
    //     Console.WriteLine($"{DateTime.Now}. {nameof(OnParametersSetAsync)}");
    //     await Task.Delay(1000);
    //     return;
    // }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(OnAfterRender)}");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"{DateTime.Now}. {nameof(OnAfterRenderAsync)}");
        await Task.Delay(1000);
        return;
    }

    /// <summary>
    /// Long-running task with multiple StateHasChanged() that raised ShouldRender()
    /// </summary>
    /// <returns></returns>
    private async Task IncrementCount()
    {
        currentCount++;
    // Renders here automatically

        await Task.Delay(1000);
        currentCount++;
        StateHasChanged();

        await Task.Delay(1000);
        currentCount++;
        StateHasChanged();

        await Task.Delay(1000);
        currentCount++;
    // Renders here automatically
    }

}