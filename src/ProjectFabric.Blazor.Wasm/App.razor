@inject IApplicationThemeService ApplicationThemeService
@inject BrowserService BrowserService

<CascadingAuthenticationState>
    <CascadingValue Value="Theme">
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                    <NotAuthorized>
                        @if (context.User.Identity?.IsAuthenticated != true)
                        {
                            <RedirectToLogin/>
                        }
                        else
                        {
                            <p role="alert">You are not authorized to access this resource.</p>
                        }
                    </NotAuthorized>
                </AuthorizeRouteView>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code {

    Theme Theme;

    /// <summary>
    ///     Entry point
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        // load theme
        var organizationId = "Enterprise Automation System"; // IT Engineer Portfolio, Enterprise Automation System
        var theme = ApplicationThemeService.FindTheme(organizationId);
        if (theme == null)
        {
            Console.WriteLine("Theme is null.");
            return;
        }

        Theme = theme;
        Console.WriteLine($"Organization default theme loaded. OrganizationName: {Theme.Organization}");
    }

    protected override async Task OnInitializedAsync()
    {
        // browser
        await BrowserService.Initialize();
        Console.WriteLine("Browser service loaded.");
    }
}