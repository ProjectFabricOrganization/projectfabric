@inject IApplicationThemeService ApplicationThemeService
@inject BrowserService BrowserService

<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
            </AuthorizeRouteView>
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {

    /// <summary>
    /// Entry point
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        // load theme
        var sec = DateTime.Now.Second;
        var organizationId = sec > 30 ? "addinol reseller" : "portfolio";
        ApplicationThemeService.Load("addinol reseller");
        Console.WriteLine($"Organization theme loaded. OrganizationName: {ApplicationThemeService.Theme.Organization}");
    }

    protected override async Task OnInitializedAsync()
    {
        // browser
        await BrowserService.Initialize();
    }

}